@import "../../pfe-sass/pfe-sass";
@include pfe-theme-contexts; // imports on="light" etc support


$LOCAL: icon;

/// ===========================================================================
/// Component Specific SASS Vars
/// ===========================================================================

@mixin greyscale-fallback() {
  background-color: white !important;

  & svg filter feFlood {
      flood-color: black !important;
  }
}

:host {
  --theme: #{pfe-local(theme)};  

  position: relative;
  display:  inline-block;

  // Supports sizing while preserving aspect ratio (despite layout)
  max-width:   calc(#{pfe-local($cssvar: size, $fallback: pfe-var(icon-size))} + (#{pfe-local($cssvar: Padding, $fallback: 0)} * 2));
  width:       fit-content !important;
  max-height:  calc(#{pfe-local($cssvar: size, $fallback: pfe-var(icon-size))} + (#{pfe-local($cssvar: Padding, $fallback: 0)} * 2));
  height:      fit-content !important;
  line-height: 0;

  @include pfe-theme-contexts();

  @at-root #{&}([data-block]) {
    display: block;
    margin-bottom: #{pfe-local($cssvar: spacing, $fallback: pfe-var(container-spacer))};
    margin-top:    #{pfe-local($cssvar: spacing, $fallback: pfe-var(container-spacer))};

    &:first-child {
      margin-top: 0;
    }
  }

  svg {
    width: #{pfe-local($cssvar: size, $fallback: pfe-var(icon-size))};
    height:#{pfe-local($cssvar: size, $fallback: pfe-var(icon-size))};
  }
}

:host(:not(.load-failed)) {
  vertical-align: middle;
  border-radius: 50%;
  background-color: #{pfe-local($cssvar: BackgroundColor, $fallback: transparent)};
  border: #{pfe-local(BorderWidth, 0)} #{pfe-var(ui--border-style)} #{pfe-local($cssvar: BorderColor, $fallback: #{pfe-local($cssvar: color, $fallback: transparent)})};
  padding: #{pfe-local($cssvar: Padding, $fallback: 0)};

  @include browser-query(ie11) {
      @include greyscale-fallback();
  }


  // Edge 12+ CSS
  @include browser-query(edge12) {
      @include greyscale-fallback();
  }

  svg image {
    @include browser-query(ie11) {
      filter: none;
    }
  }

  filter feFlood {
    flood-color: #{pfe-local($cssvar: Color, $fallback: #{pfe-local(color, #{pfe-apply-broadcast(text)})})};
  }

  .pfe-icon--fallback {
    display: none;
  }
}

@for $num from 2 through 4 {
  :host([pfe-size="#{$num}x"]) {
    --pfe-icon--size: #{$num}em;
  }
}

// TODO: Sort out sizing
:host([pfe-size="xl"]) {
  --pfe-icon--size: 100px;
}

:host([pfe-size="lg"]) {
  --pfe-icon--size: 64px;
}

:host([pfe-size="md"]) {
  --pfe-icon--size: 32px;
}

:host([pfe-size="sm"]) {
  --pfe-icon--size: 14px;
}

@each $level in (critical, important, moderate, success, info, default) {
  :host([pfe-color="#{$level}"]) {
    --pfe-icon--color: #{pfe-color(feedback--#{$level})};
    @if $level != "moderate" {
      --pfe-icon--theme: dark;
    }
  }
}

@each $color in (base, lightest, lighter, darker, darkest, complement, accent) {
  :host([pfe-color="#{$color}"]) {
    $theme: map-deep-get($pfe-colors, surface--#{$color}--theme);
    --pfe-icon--color:  #{pfe-color(surface--#{$color})};
    --pfe-icon--theme: #{$theme};
  }
}

// May need Feedback Darkest colors too.

:host([pfe-circled]:not([pfe-circled="false"])) {
  --pfe-icon--BackgroundColor: #{pfe-local($cssvar: color, $fallback: pfe-color(surface--lightest))};
  --pfe-icon--Color:           #{pfe-apply-broadcast(text)};
  --pfe-icon--Padding:         .5em;
  --pfe-icon--BorderWidth:     #{pfe-var(ui--border-width)};
  --pfe-icon--BorderColor:     #{pfe-local(color, #{pfe-color(surface--border)})};
}

:host(.load-failed) {
  --pfe-icon--BackgroundColor: transparent;
  --pfe-icon--BorderColor: transparent;
  --pfe-icon--Padding: 0;

  ::slotted(*:first-child) {
    margin-top: 0;
  }

  ::slotted(*:last-child) {
    margin-bottom: 0;
  }

  svg image {
    display: none;
  }
}

:host(.load-failed.has-fallback) svg,
:host(.load-failed[on-fail="collapse"]) svg {
  display: none;
}

:host(.load-failed[on-fail="collapse"]) {
  --pfe-icon--size: 0;
}
